
//*************************************************************************************
//   !!! Generated by the fmp-cli 1.88.0.  DO NOT EDIT!
//*************************************************************************************

using System.Threading;
using System.Threading.Tasks;
using Grpc.Net.Client;
using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.Analytics.LIB.Proto;

namespace XTC.FMP.MOD.Analytics.LIB.MVCS
{
    /// <summary>
    /// Generator服务层基类
    /// </summary>
    public class GeneratorServiceBase : Service
    {
        public GeneratorServiceMock mock { get; set; } = new GeneratorServiceMock();
    
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        /// <param name="_gid">直系的组的ID</param>
        public GeneratorServiceBase(string _uid, string _gid) : base(_uid)
        {
            gid_ = _gid;
        }

        /// <summary>
        /// 注入GRPC通道
        /// </summary>
        /// <param name="_channel">GRPC通道</param>
        public void InjectGrpcChannel(GrpcChannel? _channel)
        {
            grpcChannel_ = _channel;
        }


        /// <summary>
        /// 调用Record
        /// </summary>
        /// <param name="_request">Record的请求</param>
        /// <returns>错误</returns>
        public virtual async Task<Error> CallRecord(GeneratorRecordRequest? _request, object? _context)
        {
            getLogger()?.Trace("Call Record ...");
            if (null == _request)
            {
                return Error.NewNullErr("parameter:_request is null");
            }

            GeneratorRecordResponse? response = null;
            if (null != mock.CallRecordDelegate)
            {
                getLogger()?.Trace("use mock ...");
                response = await mock.CallRecordDelegate(_request);
            }
            else
            {
                var client = getGrpcClient();
                if (null == client)
                {
                    return await Task.FromResult(Error.NewNullErr("client is null"));
                }
                response = await client.RecordAsync(_request);
            }

            getModel()?.UpdateProtoRecord(response, _context);
            return Error.OK;
        }


        /// <summary>
        /// 获取直系数据层
        /// </summary>
        /// <returns>数据层</returns>
        protected GeneratorModel? getModel()
        {
            if(null == model_)
                model_ = findModel(GeneratorModel.NAME + "." + gid_) as GeneratorModel;
            return model_;
        }

        /// <summary>
        /// 获取GRPC客户端
        /// </summary>
        /// <returns>GRPC客户端</returns>
        protected Generator.GeneratorClient? getGrpcClient()
        {
            if (null == grpcChannel_)
                return null;

            if(null == clientGenerator_)
            {
                clientGenerator_ = new Generator.GeneratorClient(grpcChannel_);
            }
            return clientGenerator_;
        }

        /// <summary>
        /// 直系的MVCS的四个组件的组的ID
        /// </summary>
        protected string gid_ = "";

        /// <summary>
        /// GRPC客户端
        /// </summary>
        protected Generator.GeneratorClient? clientGenerator_;

        /// <summary>
        /// GRPC通道
        /// </summary>
        protected GrpcChannel? grpcChannel_;

        /// <summary>
        /// 直系数据层
        /// </summary>
        private GeneratorModel? model_;
    }

}
