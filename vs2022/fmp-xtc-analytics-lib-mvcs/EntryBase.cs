
//*************************************************************************************
//   !!! Generated by the fmp-cli 1.88.0.  DO NOT EDIT!
//*************************************************************************************

using System.Collections.Generic;
using Grpc.Net.Client;
using XTC.FMP.LIB.MVCS;

namespace XTC.FMP.MOD.Analytics.LIB.MVCS
{

    /// <summary>
    /// 模块选项
    /// </summary>
    public class Options : UserData
    {
        /// 获取GRPC通道
        /// </summary>
        public GrpcChannel? getChannel()
        {
            return channel_;
        }

        /// <summary>
        /// 设置GRPC通道
        /// </summary>
        /// <param name="_channel">GRPC通道</param>
        public void setChannel(GrpcChannel? _channel)
        {
            channel_ = _channel;
        }

        /// <summary>
        /// 获取权限列表
        /// </summary>
        public Dictionary<string,string> getPermissionS()
        {
            return permissionS_;
        }

        /// <summary>
        /// 设置权限列表
        /// </summary>
        /// <param name="_permissionS">权限列表</param>
        public void setPermissionS(Dictionary<string,string> _permissionS)
        {
            permissionS_ = _permissionS;
        }

        /// <summary>
        /// GRPC通道
        /// </summary>
        private GrpcChannel? channel_;

        /// <summary>
        /// 权限列表
        /// </summary>
        private Dictionary<string, string> permissionS_ = new Dictionary<string, string>();
    }

    /// <summary>
    /// 模块入口基类
    /// </summary>
    public class EntryBase : UserData
    {
        /// <summary>
        /// 模块选项
        /// </summary>
        protected Options? options_;

        protected Dictionary<string, GeneratorFacade?> facadeGeneratorStaticMap_ = new Dictionary<string, GeneratorFacade?>();
        protected Dictionary<string, GeneratorModel?> modelGeneratorStaticMap_ = new Dictionary<string, GeneratorModel?>();
        protected Dictionary<string, GeneratorView?> viewGeneratorStaticMap_ = new Dictionary<string, GeneratorView?>();
        protected Dictionary<string, GeneratorController?> controllerGeneratorStaticMap_ = new Dictionary<string, GeneratorController?>();
        protected Dictionary<string, GeneratorService?> serviceGeneratorStaticMap_ = new Dictionary<string, GeneratorService?>();

        protected Dictionary<string, GeneratorFacade?> facadeGeneratorDynamicMap_ = new Dictionary<string, GeneratorFacade?>();
        protected Dictionary<string, GeneratorModel?> modelGeneratorDynamicMap_ = new Dictionary<string, GeneratorModel?>();
        protected Dictionary<string, GeneratorView?> viewGeneratorDynamicMap_ = new Dictionary<string, GeneratorView?>();
        protected Dictionary<string, GeneratorController?> controllerGeneratorDynamicMap_ = new Dictionary<string, GeneratorController?>();
        protected Dictionary<string, GeneratorService?> serviceGeneratorDynamicMap_ = new Dictionary<string, GeneratorService?>();

        /// <summary>
        /// 获取Generator的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public GeneratorFacade? getStaticGeneratorFacade(string _gid)
        {
            GeneratorFacade? facade = null;
            if (!facadeGeneratorStaticMap_.TryGetValue(GeneratorFacade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }

        /// <summary>
        /// 获取Generator的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public GeneratorFacade? getDynamicGeneratorFacade(string _gid)
        {
            GeneratorFacade? facade = null;
            if (!facadeGeneratorDynamicMap_.TryGetValue(GeneratorFacade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }

        protected Dictionary<string, HealthyFacade?> facadeHealthyStaticMap_ = new Dictionary<string, HealthyFacade?>();
        protected Dictionary<string, HealthyModel?> modelHealthyStaticMap_ = new Dictionary<string, HealthyModel?>();
        protected Dictionary<string, HealthyView?> viewHealthyStaticMap_ = new Dictionary<string, HealthyView?>();
        protected Dictionary<string, HealthyController?> controllerHealthyStaticMap_ = new Dictionary<string, HealthyController?>();
        protected Dictionary<string, HealthyService?> serviceHealthyStaticMap_ = new Dictionary<string, HealthyService?>();

        protected Dictionary<string, HealthyFacade?> facadeHealthyDynamicMap_ = new Dictionary<string, HealthyFacade?>();
        protected Dictionary<string, HealthyModel?> modelHealthyDynamicMap_ = new Dictionary<string, HealthyModel?>();
        protected Dictionary<string, HealthyView?> viewHealthyDynamicMap_ = new Dictionary<string, HealthyView?>();
        protected Dictionary<string, HealthyController?> controllerHealthyDynamicMap_ = new Dictionary<string, HealthyController?>();
        protected Dictionary<string, HealthyService?> serviceHealthyDynamicMap_ = new Dictionary<string, HealthyService?>();

        /// <summary>
        /// 获取Healthy的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public HealthyFacade? getStaticHealthyFacade(string _gid)
        {
            HealthyFacade? facade = null;
            if (!facadeHealthyStaticMap_.TryGetValue(HealthyFacade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }

        /// <summary>
        /// 获取Healthy的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public HealthyFacade? getDynamicHealthyFacade(string _gid)
        {
            HealthyFacade? facade = null;
            if (!facadeHealthyDynamicMap_.TryGetValue(HealthyFacade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }

        protected Dictionary<string, TrackerFacade?> facadeTrackerStaticMap_ = new Dictionary<string, TrackerFacade?>();
        protected Dictionary<string, TrackerModel?> modelTrackerStaticMap_ = new Dictionary<string, TrackerModel?>();
        protected Dictionary<string, TrackerView?> viewTrackerStaticMap_ = new Dictionary<string, TrackerView?>();
        protected Dictionary<string, TrackerController?> controllerTrackerStaticMap_ = new Dictionary<string, TrackerController?>();
        protected Dictionary<string, TrackerService?> serviceTrackerStaticMap_ = new Dictionary<string, TrackerService?>();

        protected Dictionary<string, TrackerFacade?> facadeTrackerDynamicMap_ = new Dictionary<string, TrackerFacade?>();
        protected Dictionary<string, TrackerModel?> modelTrackerDynamicMap_ = new Dictionary<string, TrackerModel?>();
        protected Dictionary<string, TrackerView?> viewTrackerDynamicMap_ = new Dictionary<string, TrackerView?>();
        protected Dictionary<string, TrackerController?> controllerTrackerDynamicMap_ = new Dictionary<string, TrackerController?>();
        protected Dictionary<string, TrackerService?> serviceTrackerDynamicMap_ = new Dictionary<string, TrackerService?>();

        /// <summary>
        /// 获取Tracker的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public TrackerFacade? getStaticTrackerFacade(string _gid)
        {
            TrackerFacade? facade = null;
            if (!facadeTrackerStaticMap_.TryGetValue(TrackerFacade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }

        /// <summary>
        /// 获取Tracker的UI装饰层
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <returns>UI装饰层</returns>
        public TrackerFacade? getDynamicTrackerFacade(string _gid)
        {
            TrackerFacade? facade = null;
            if (!facadeTrackerDynamicMap_.TryGetValue(TrackerFacade.NAME + "." + _gid, out facade))
                return null;
            return facade;
        }


        /// <summary>
        /// 注入MVCS框架
        /// </summary>
        /// <param name="_framework">MVCS框架</param>
        /// <param name="_options">模块选项</param>
        public void Inject(Framework _framework, Options _options)
        {
            framework_ = _framework;
            options_ = _options;
        }

        /// <summary>
        /// 获取权限列表
        /// </summary>
        public Dictionary<string, string> getPermissionS()
        {
            return options_?.getPermissionS() ?? new Dictionary<string, string>();
        }

        /// <summary>
        /// 静态注册
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error staticRegister(string _gid, Logger? _logger)
        {
            _logger?.Trace("StaticRegister");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注册数据层
            var modelGenerator = new GeneratorModel(GeneratorModel.NAME + "." + _gid, _gid);
            modelGeneratorStaticMap_[GeneratorModel.NAME + "." + _gid] = modelGenerator;
            framework_.getStaticPipe().RegisterModel(modelGenerator);
            // 注册视图层
            var viewGenerator = new GeneratorView(GeneratorView.NAME + "." + _gid, _gid);
            viewGeneratorStaticMap_[GeneratorView.NAME + "." + _gid] = viewGenerator;
            framework_.getStaticPipe().RegisterView(viewGenerator);
            // 注册控制层
            var controllerGenerator = new GeneratorController(GeneratorController.NAME + "." + _gid, _gid);
            controllerGeneratorStaticMap_[GeneratorController.NAME + "." + _gid] = controllerGenerator;
            framework_.getStaticPipe().RegisterController(controllerGenerator);
            // 注册服务层
            var serviceGenerator = new GeneratorService(GeneratorService.NAME + "." + _gid, _gid);
            serviceGeneratorStaticMap_[GeneratorService.NAME + "." + _gid] = serviceGenerator;
            framework_.getStaticPipe().RegisterService(serviceGenerator);
            serviceGenerator.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facadeGenerator = new GeneratorFacade(GeneratorFacade.NAME + "." + _gid, _gid);
            facadeGeneratorStaticMap_[GeneratorFacade.NAME + "." + _gid] = facadeGenerator;
            var bridgeGenerator = new GeneratorViewBridge();
            bridgeGenerator.service = serviceGenerator;
            facadeGenerator.setViewBridge(bridgeGenerator);
            framework_.getStaticPipe().RegisterFacade(facadeGenerator);

            // 注册数据层
            var modelHealthy = new HealthyModel(HealthyModel.NAME + "." + _gid, _gid);
            modelHealthyStaticMap_[HealthyModel.NAME + "." + _gid] = modelHealthy;
            framework_.getStaticPipe().RegisterModel(modelHealthy);
            // 注册视图层
            var viewHealthy = new HealthyView(HealthyView.NAME + "." + _gid, _gid);
            viewHealthyStaticMap_[HealthyView.NAME + "." + _gid] = viewHealthy;
            framework_.getStaticPipe().RegisterView(viewHealthy);
            // 注册控制层
            var controllerHealthy = new HealthyController(HealthyController.NAME + "." + _gid, _gid);
            controllerHealthyStaticMap_[HealthyController.NAME + "." + _gid] = controllerHealthy;
            framework_.getStaticPipe().RegisterController(controllerHealthy);
            // 注册服务层
            var serviceHealthy = new HealthyService(HealthyService.NAME + "." + _gid, _gid);
            serviceHealthyStaticMap_[HealthyService.NAME + "." + _gid] = serviceHealthy;
            framework_.getStaticPipe().RegisterService(serviceHealthy);
            serviceHealthy.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facadeHealthy = new HealthyFacade(HealthyFacade.NAME + "." + _gid, _gid);
            facadeHealthyStaticMap_[HealthyFacade.NAME + "." + _gid] = facadeHealthy;
            var bridgeHealthy = new HealthyViewBridge();
            bridgeHealthy.service = serviceHealthy;
            facadeHealthy.setViewBridge(bridgeHealthy);
            framework_.getStaticPipe().RegisterFacade(facadeHealthy);

            // 注册数据层
            var modelTracker = new TrackerModel(TrackerModel.NAME + "." + _gid, _gid);
            modelTrackerStaticMap_[TrackerModel.NAME + "." + _gid] = modelTracker;
            framework_.getStaticPipe().RegisterModel(modelTracker);
            // 注册视图层
            var viewTracker = new TrackerView(TrackerView.NAME + "." + _gid, _gid);
            viewTrackerStaticMap_[TrackerView.NAME + "." + _gid] = viewTracker;
            framework_.getStaticPipe().RegisterView(viewTracker);
            // 注册控制层
            var controllerTracker = new TrackerController(TrackerController.NAME + "." + _gid, _gid);
            controllerTrackerStaticMap_[TrackerController.NAME + "." + _gid] = controllerTracker;
            framework_.getStaticPipe().RegisterController(controllerTracker);
            // 注册服务层
            var serviceTracker = new TrackerService(TrackerService.NAME + "." + _gid, _gid);
            serviceTrackerStaticMap_[TrackerService.NAME + "." + _gid] = serviceTracker;
            framework_.getStaticPipe().RegisterService(serviceTracker);
            serviceTracker.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facadeTracker = new TrackerFacade(TrackerFacade.NAME + "." + _gid, _gid);
            facadeTrackerStaticMap_[TrackerFacade.NAME + "." + _gid] = facadeTracker;
            var bridgeTracker = new TrackerViewBridge();
            bridgeTracker.service = serviceTracker;
            facadeTracker.setViewBridge(bridgeTracker);
            framework_.getStaticPipe().RegisterFacade(facadeTracker);

            return Error.OK;
        }

        /// <summary>
        /// 动态注册
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error dynamicRegister(string _gid, Logger _logger)
        {
            _logger.Trace("DynamicRegister");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注册数据层
            var modelGenerator = new GeneratorModel(GeneratorModel.NAME + "." + _gid, _gid);
            modelGeneratorDynamicMap_[GeneratorModel.NAME + "." + _gid] = modelGenerator;
            framework_.getDynamicPipe().PushModel(modelGenerator);
            // 注册视图层
            var viewGenerator = new GeneratorView(GeneratorView.NAME + "." + _gid, _gid);
            viewGeneratorDynamicMap_[GeneratorView.NAME + "." + _gid] = viewGenerator;
            framework_.getDynamicPipe().PushView(viewGenerator);
            // 注册控制层
            var controllerGenerator = new GeneratorController(GeneratorController.NAME + "." + _gid, _gid);
            controllerGeneratorDynamicMap_[GeneratorController.NAME + "." + _gid] = controllerGenerator;
            framework_.getDynamicPipe().PushController(controllerGenerator);
            // 注册服务层
            var serviceGenerator = new GeneratorService(GeneratorService.NAME + "." + _gid, _gid);
            serviceGeneratorDynamicMap_[GeneratorService.NAME + "." + _gid] = serviceGenerator;
            framework_.getDynamicPipe().PushService(serviceGenerator);
            serviceGenerator.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facadeGenerator = new GeneratorFacade(GeneratorFacade.NAME + "." + _gid, _gid);
            facadeGeneratorDynamicMap_[GeneratorFacade.NAME + "." + _gid] = facadeGenerator;
            var bridgeGenerator = new GeneratorViewBridge();
            bridgeGenerator.service = serviceGenerator;
            facadeGenerator.setViewBridge(bridgeGenerator);
            framework_.getDynamicPipe().PushFacade(facadeGenerator);

            // 注册数据层
            var modelHealthy = new HealthyModel(HealthyModel.NAME + "." + _gid, _gid);
            modelHealthyDynamicMap_[HealthyModel.NAME + "." + _gid] = modelHealthy;
            framework_.getDynamicPipe().PushModel(modelHealthy);
            // 注册视图层
            var viewHealthy = new HealthyView(HealthyView.NAME + "." + _gid, _gid);
            viewHealthyDynamicMap_[HealthyView.NAME + "." + _gid] = viewHealthy;
            framework_.getDynamicPipe().PushView(viewHealthy);
            // 注册控制层
            var controllerHealthy = new HealthyController(HealthyController.NAME + "." + _gid, _gid);
            controllerHealthyDynamicMap_[HealthyController.NAME + "." + _gid] = controllerHealthy;
            framework_.getDynamicPipe().PushController(controllerHealthy);
            // 注册服务层
            var serviceHealthy = new HealthyService(HealthyService.NAME + "." + _gid, _gid);
            serviceHealthyDynamicMap_[HealthyService.NAME + "." + _gid] = serviceHealthy;
            framework_.getDynamicPipe().PushService(serviceHealthy);
            serviceHealthy.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facadeHealthy = new HealthyFacade(HealthyFacade.NAME + "." + _gid, _gid);
            facadeHealthyDynamicMap_[HealthyFacade.NAME + "." + _gid] = facadeHealthy;
            var bridgeHealthy = new HealthyViewBridge();
            bridgeHealthy.service = serviceHealthy;
            facadeHealthy.setViewBridge(bridgeHealthy);
            framework_.getDynamicPipe().PushFacade(facadeHealthy);

            // 注册数据层
            var modelTracker = new TrackerModel(TrackerModel.NAME + "." + _gid, _gid);
            modelTrackerDynamicMap_[TrackerModel.NAME + "." + _gid] = modelTracker;
            framework_.getDynamicPipe().PushModel(modelTracker);
            // 注册视图层
            var viewTracker = new TrackerView(TrackerView.NAME + "." + _gid, _gid);
            viewTrackerDynamicMap_[TrackerView.NAME + "." + _gid] = viewTracker;
            framework_.getDynamicPipe().PushView(viewTracker);
            // 注册控制层
            var controllerTracker = new TrackerController(TrackerController.NAME + "." + _gid, _gid);
            controllerTrackerDynamicMap_[TrackerController.NAME + "." + _gid] = controllerTracker;
            framework_.getDynamicPipe().PushController(controllerTracker);
            // 注册服务层
            var serviceTracker = new TrackerService(TrackerService.NAME + "." + _gid, _gid);
            serviceTrackerDynamicMap_[TrackerService.NAME + "." + _gid] = serviceTracker;
            framework_.getDynamicPipe().PushService(serviceTracker);
            serviceTracker.InjectGrpcChannel(options_?.getChannel());
            // 注册UI装饰层
            var facadeTracker = new TrackerFacade(TrackerFacade.NAME + "." + _gid, _gid);
            facadeTrackerDynamicMap_[TrackerFacade.NAME + "." + _gid] = facadeTracker;
            var bridgeTracker = new TrackerViewBridge();
            bridgeTracker.service = serviceTracker;
            facadeTracker.setViewBridge(bridgeTracker);
            framework_.getDynamicPipe().PushFacade(facadeTracker);

            return Error.OK;
        }

        /// <summary>
        /// 静态注销
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error staticCancel(string _gid, Logger _logger)
        {
            _logger?.Trace("StaticCancel");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注销服务层
            GeneratorService? serviceGenerator;
            if(serviceGeneratorStaticMap_.TryGetValue(GeneratorService.NAME + "." + _gid, out serviceGenerator))
            {
                framework_.getStaticPipe().CancelService(serviceGenerator);
                serviceGeneratorStaticMap_.Remove(GeneratorService.NAME + "." +_gid);
            }
            // 注销控制层
            GeneratorController? controllerGenerator;
            if(controllerGeneratorStaticMap_.TryGetValue(GeneratorController.NAME + "." + _gid, out controllerGenerator))
            {
                framework_.getStaticPipe().CancelController(controllerGenerator);
                controllerGeneratorStaticMap_.Remove(GeneratorController.NAME + "." +_gid);
            }
            // 注销视图层
            GeneratorView? viewGenerator;
            if(viewGeneratorStaticMap_.TryGetValue(GeneratorView.NAME + "." + _gid, out viewGenerator))
            {
                framework_.getStaticPipe().CancelView(viewGenerator);
                viewGeneratorStaticMap_.Remove(GeneratorView.NAME + "." +_gid);
            }
            // 注销UI装饰层
            GeneratorFacade? facadeGenerator;
            if(facadeGeneratorStaticMap_.TryGetValue(GeneratorFacade.NAME + "." + _gid, out facadeGenerator))
            {
                framework_.getStaticPipe().CancelFacade(facadeGenerator);
                facadeGeneratorStaticMap_.Remove(GeneratorFacade.NAME + "." +_gid);
            }
            // 注销数据层
            GeneratorModel? modelGenerator;
            if(modelGeneratorStaticMap_.TryGetValue(GeneratorModel.NAME + "." + _gid, out modelGenerator))
            {
                framework_.getStaticPipe().CancelModel(modelGenerator);
                modelGeneratorStaticMap_.Remove(GeneratorModel.NAME + "." +_gid);
            }

            // 注销服务层
            HealthyService? serviceHealthy;
            if(serviceHealthyStaticMap_.TryGetValue(HealthyService.NAME + "." + _gid, out serviceHealthy))
            {
                framework_.getStaticPipe().CancelService(serviceHealthy);
                serviceHealthyStaticMap_.Remove(HealthyService.NAME + "." +_gid);
            }
            // 注销控制层
            HealthyController? controllerHealthy;
            if(controllerHealthyStaticMap_.TryGetValue(HealthyController.NAME + "." + _gid, out controllerHealthy))
            {
                framework_.getStaticPipe().CancelController(controllerHealthy);
                controllerHealthyStaticMap_.Remove(HealthyController.NAME + "." +_gid);
            }
            // 注销视图层
            HealthyView? viewHealthy;
            if(viewHealthyStaticMap_.TryGetValue(HealthyView.NAME + "." + _gid, out viewHealthy))
            {
                framework_.getStaticPipe().CancelView(viewHealthy);
                viewHealthyStaticMap_.Remove(HealthyView.NAME + "." +_gid);
            }
            // 注销UI装饰层
            HealthyFacade? facadeHealthy;
            if(facadeHealthyStaticMap_.TryGetValue(HealthyFacade.NAME + "." + _gid, out facadeHealthy))
            {
                framework_.getStaticPipe().CancelFacade(facadeHealthy);
                facadeHealthyStaticMap_.Remove(HealthyFacade.NAME + "." +_gid);
            }
            // 注销数据层
            HealthyModel? modelHealthy;
            if(modelHealthyStaticMap_.TryGetValue(HealthyModel.NAME + "." + _gid, out modelHealthy))
            {
                framework_.getStaticPipe().CancelModel(modelHealthy);
                modelHealthyStaticMap_.Remove(HealthyModel.NAME + "." +_gid);
            }

            // 注销服务层
            TrackerService? serviceTracker;
            if(serviceTrackerStaticMap_.TryGetValue(TrackerService.NAME + "." + _gid, out serviceTracker))
            {
                framework_.getStaticPipe().CancelService(serviceTracker);
                serviceTrackerStaticMap_.Remove(TrackerService.NAME + "." +_gid);
            }
            // 注销控制层
            TrackerController? controllerTracker;
            if(controllerTrackerStaticMap_.TryGetValue(TrackerController.NAME + "." + _gid, out controllerTracker))
            {
                framework_.getStaticPipe().CancelController(controllerTracker);
                controllerTrackerStaticMap_.Remove(TrackerController.NAME + "." +_gid);
            }
            // 注销视图层
            TrackerView? viewTracker;
            if(viewTrackerStaticMap_.TryGetValue(TrackerView.NAME + "." + _gid, out viewTracker))
            {
                framework_.getStaticPipe().CancelView(viewTracker);
                viewTrackerStaticMap_.Remove(TrackerView.NAME + "." +_gid);
            }
            // 注销UI装饰层
            TrackerFacade? facadeTracker;
            if(facadeTrackerStaticMap_.TryGetValue(TrackerFacade.NAME + "." + _gid, out facadeTracker))
            {
                framework_.getStaticPipe().CancelFacade(facadeTracker);
                facadeTrackerStaticMap_.Remove(TrackerFacade.NAME + "." +_gid);
            }
            // 注销数据层
            TrackerModel? modelTracker;
            if(modelTrackerStaticMap_.TryGetValue(TrackerModel.NAME + "." + _gid, out modelTracker))
            {
                framework_.getStaticPipe().CancelModel(modelTracker);
                modelTrackerStaticMap_.Remove(TrackerModel.NAME + "." +_gid);
            }

            return Error.OK;
        }

        /// <summary>
        /// 动态注销
        /// </summary>
        /// <param name="_gid">直系的组的ID</param>
        /// <param name="_logger">日志</param>
        /// <returns>错误</returns>
        protected Error dynamicCancel(string _gid, Logger _logger)
        {
            _logger?.Trace("DynamicCancel");

            if (null == framework_)
            {
                return Error.NewNullErr("framework is null");
            }

            // 注销服务层
            GeneratorService? serviceGenerator;
            if(serviceGeneratorDynamicMap_.TryGetValue(GeneratorService.NAME + "." + _gid, out serviceGenerator))
            {
                framework_.getDynamicPipe().PopService(serviceGenerator);
                serviceGeneratorDynamicMap_.Remove(GeneratorService.NAME + "." +_gid);
            }
            // 注销控制层
            GeneratorController? controllerGenerator;
            if(controllerGeneratorDynamicMap_.TryGetValue(GeneratorController.NAME + "." + _gid, out controllerGenerator))
            {
                framework_.getDynamicPipe().PopController(controllerGenerator);
                controllerGeneratorDynamicMap_.Remove(GeneratorController.NAME + "." +_gid);
            }
            // 注销视图层
            GeneratorView? viewGenerator;
            if(viewGeneratorDynamicMap_.TryGetValue(GeneratorView.NAME + "." + _gid, out viewGenerator))
            {
                framework_.getDynamicPipe().PopView(viewGenerator);
                viewGeneratorDynamicMap_.Remove(GeneratorView.NAME + "." +_gid);
            }
            // 注销UI装饰层
            GeneratorFacade? facadeGenerator;
            if(facadeGeneratorDynamicMap_.TryGetValue(GeneratorFacade.NAME + "." + _gid, out facadeGenerator))
            {
                framework_.getDynamicPipe().PopFacade(facadeGenerator);
                facadeGeneratorDynamicMap_.Remove(GeneratorFacade.NAME + "." +_gid);
            }
            // 注销数据层
            GeneratorModel? modelGenerator;
            if(modelGeneratorDynamicMap_.TryGetValue(GeneratorModel.NAME + "." + _gid, out modelGenerator))
            {
                framework_.getDynamicPipe().PopModel(modelGenerator);
                modelGeneratorDynamicMap_.Remove(GeneratorModel.NAME + "." +_gid);
            }

            // 注销服务层
            HealthyService? serviceHealthy;
            if(serviceHealthyDynamicMap_.TryGetValue(HealthyService.NAME + "." + _gid, out serviceHealthy))
            {
                framework_.getDynamicPipe().PopService(serviceHealthy);
                serviceHealthyDynamicMap_.Remove(HealthyService.NAME + "." +_gid);
            }
            // 注销控制层
            HealthyController? controllerHealthy;
            if(controllerHealthyDynamicMap_.TryGetValue(HealthyController.NAME + "." + _gid, out controllerHealthy))
            {
                framework_.getDynamicPipe().PopController(controllerHealthy);
                controllerHealthyDynamicMap_.Remove(HealthyController.NAME + "." +_gid);
            }
            // 注销视图层
            HealthyView? viewHealthy;
            if(viewHealthyDynamicMap_.TryGetValue(HealthyView.NAME + "." + _gid, out viewHealthy))
            {
                framework_.getDynamicPipe().PopView(viewHealthy);
                viewHealthyDynamicMap_.Remove(HealthyView.NAME + "." +_gid);
            }
            // 注销UI装饰层
            HealthyFacade? facadeHealthy;
            if(facadeHealthyDynamicMap_.TryGetValue(HealthyFacade.NAME + "." + _gid, out facadeHealthy))
            {
                framework_.getDynamicPipe().PopFacade(facadeHealthy);
                facadeHealthyDynamicMap_.Remove(HealthyFacade.NAME + "." +_gid);
            }
            // 注销数据层
            HealthyModel? modelHealthy;
            if(modelHealthyDynamicMap_.TryGetValue(HealthyModel.NAME + "." + _gid, out modelHealthy))
            {
                framework_.getDynamicPipe().PopModel(modelHealthy);
                modelHealthyDynamicMap_.Remove(HealthyModel.NAME + "." +_gid);
            }

            // 注销服务层
            TrackerService? serviceTracker;
            if(serviceTrackerDynamicMap_.TryGetValue(TrackerService.NAME + "." + _gid, out serviceTracker))
            {
                framework_.getDynamicPipe().PopService(serviceTracker);
                serviceTrackerDynamicMap_.Remove(TrackerService.NAME + "." +_gid);
            }
            // 注销控制层
            TrackerController? controllerTracker;
            if(controllerTrackerDynamicMap_.TryGetValue(TrackerController.NAME + "." + _gid, out controllerTracker))
            {
                framework_.getDynamicPipe().PopController(controllerTracker);
                controllerTrackerDynamicMap_.Remove(TrackerController.NAME + "." +_gid);
            }
            // 注销视图层
            TrackerView? viewTracker;
            if(viewTrackerDynamicMap_.TryGetValue(TrackerView.NAME + "." + _gid, out viewTracker))
            {
                framework_.getDynamicPipe().PopView(viewTracker);
                viewTrackerDynamicMap_.Remove(TrackerView.NAME + "." +_gid);
            }
            // 注销UI装饰层
            TrackerFacade? facadeTracker;
            if(facadeTrackerDynamicMap_.TryGetValue(TrackerFacade.NAME + "." + _gid, out facadeTracker))
            {
                framework_.getDynamicPipe().PopFacade(facadeTracker);
                facadeTrackerDynamicMap_.Remove(TrackerFacade.NAME + "." +_gid);
            }
            // 注销数据层
            TrackerModel? modelTracker;
            if(modelTrackerDynamicMap_.TryGetValue(TrackerModel.NAME + "." + _gid, out modelTracker))
            {
                framework_.getDynamicPipe().PopModel(modelTracker);
                modelTrackerDynamicMap_.Remove(TrackerModel.NAME + "." +_gid);
            }

            return Error.OK;
        }

        /// <summary>
        /// MVCS框架
        /// </summary>
        protected Framework? framework_;
    }
}

